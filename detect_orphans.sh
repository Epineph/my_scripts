#!/usr/bin/env bash
#
# refresh_orphans.sh
# ------------------
# Detect current orphaned packages and generate a one-line installer script.
# The generated script is written to ~/my_scripts/install_orphans.sh
#
# Usage:
#   chmod +x ~/my_scripts/refresh_orphans.sh
#   ~/my_scripts/refresh_orphans.sh
#
# After running, inspect or run:
#   ~/my_scripts/install_orphans.sh

set -euo pipefail

# --- Configuration ---
SCRIPT_DIR="$HOME/my_scripts"
INSTALL_SCRIPT="$SCRIPT_DIR/install_orphans.sh"

# --- Ensure target directory exists ---
mkdir -p "$SCRIPT_DIR"

# --- Gather orphaned packages into an array ---
mapfile -t orphan_array < <(pacman -Qdtq)

# --- If no orphans, clean up previous script and exit ---
if [[ ${#orphan_array[@]} -eq 0 ]]; then
  echo "No orphaned packages detected. Removing any previous install script."
  rm -f "$INSTALL_SCRIPT"
  exit 0
fi

# --- Join package names into a space-separated list ---
orphans="${orphan_array[*]}"

# --- Generate the install script with a single yay command ---
cat > "$INSTALL_SCRIPT" <<EOF
#!/usr/bin/env bash
#
# install_orphans.sh
# ------------------
# Installs the packages that were orphaned at generation time.
# Generated by refresh_orphans.sh on $(date --iso-8601=seconds).
#
set -euo pipefail

echo "Installing orphaned packages: $orphans"
yay -S --needed $orphans
EOF

# --- Make generated script executable ---
chmod +x "$INSTALL_SCRIPT"

# --- Feedback ---
echo "Generated installer: $INSTALL_SCRIPT"
echo "Command: yay -S --needed $orphans"

